from flask_sqlalchemy import SQLAlchemy

db = SQLAlchemy()

class User(db.Model):
    id = db.Column(db.Integer, primary_key=True, autoincrement=True)
    name = db.Column(db.String(255))
    role = db.Column(db.String(255))
    password = db.Column(db.String(255))

class GeoLocation(db.Model):
    __tablename__ = 'geolocation'
    id = db.Column(db.Integer, primary_key=True, autoincrement=True)
    longitude = db.Column(db.Numeric(9, 6))
    latitude = db.Column(db.Numeric(9, 6))
    altitude = db.Column(db.Numeric(7, 2))
    name = db.Column(db.String(255))
    description = db.Column(db.Text)
    country = db.Column(db.String(255))
    city = db.Column(db.String(255))
    address = db.Column(db.String(255))

class Site(db.Model):
    id = db.Column(db.Integer, primary_key=True, autoincrement=True)
    name = db.Column(db.String(255))
    site_type = db.Column(db.String(255))
    demand = db.Column(db.Numeric(10, 2))
    daily_consumption = db.Column(db.Numeric(10, 2))
    surplus = db.Column(db.Numeric(10, 2))
    number_of_occupants = db.Column(db.Integer)
    size = db.Column(db.Numeric(10, 2))
    location = db.Column(db.String(255))
    user_id = db.Column(db.Integer, db.ForeignKey('user.id'))
    location_id = db.Column(db.Integer, db.ForeignKey('geolocation.id'))

class New_Site(db.Model):
    id = db.Column(db.Integer, primary_key=True, autoincrement=True)
    name = db.Column(db.String(255))
    site_type = db.Column(db.String(255))
    demand = db.Column(db.Numeric(10, 2))
    daily_consumption = db.Column(db.Numeric(10, 2))
    surplus = db.Column(db.Numeric(10, 2))
    number_of_occupants = db.Column(db.Integer)
    size = db.Column(db.Numeric(10, 2))
    location = db.Column(db.String(255))
    
    # Foreign keys for User and GeoLocation
    user_id = db.Column(db.Integer, db.ForeignKey('user.id'))
    location_id = db.Column(db.Integer, db.ForeignKey('geolocation.id'))

    # Foreign keys for energy sources
    pv_array_id = db.Column(db.Integer, db.ForeignKey('pv_array.id'))
    wind_turbine_id = db.Column(db.Integer, db.ForeignKey('wind_turbine.id'))
    hydrogen_fuel_cell_id = db.Column(db.Integer, db.ForeignKey('hydrogen_fuel_cell.id'))
    biomass_id = db.Column(db.Integer, db.ForeignKey('biomass.id'))
    geothermal_id = db.Column(db.Integer, db.ForeignKey('geo_thermal.id'))
    hydropower_id = db.Column(db.Integer, db.ForeignKey('hydropower.id'))
    electric_battery_id = db.Column(db.Integer, db.ForeignKey('electric_battery.id'))
    flywheel_energy_storage_id = db.Column(db.Integer, db.ForeignKey('flywheel_energy_storage.id'))
    hydrogen_energy_storage_id = db.Column(db.Integer, db.ForeignKey('hydrogen_energy_storage.id'))
    thermal_battery_id = db.Column(db.Integer, db.ForeignKey('thermal_battery.id'))
    combined_heat_power_id = db.Column(db.Integer, db.ForeignKey('combined_heat_power.id'))
    generator_id = db.Column(db.Integer, db.ForeignKey('generator.id'))
    steam_methane_reformer_id = db.Column(db.Integer, db.ForeignKey('steam_methane_reformer.id'))
    hydrogen_based_cphs_id = db.Column(db.Integer, db.ForeignKey('hydrogen_based_cphs.id'))
    water_treatment_plant_id = db.Column(db.Integer, db.ForeignKey('water_treatment_plant.id'))
    power_plant_id = db.Column(db.Integer, db.ForeignKey('power_plant.id'))

class Load(db.Model):
    id = db.Column(db.Integer, primary_key=True, autoincrement=True)
    name = db.Column(db.String(255))
    load_type = db.Column(db.String(255))
    demand = db.Column(db.Numeric(10, 2))
    site_id = db.Column(db.Integer, db.ForeignKey('site.id'))

class Utility(db.Model):
    id = db.Column(db.Integer, primary_key=True, autoincrement=True)
    name = db.Column(db.String(255))
    utility_type = db.Column(db.String(255))
    demand = db.Column(db.Numeric(10, 2))
    price_per_unit = db.Column(db.Numeric(10, 2))
    location = db.Column(db.String(255))
    emission_rate = db.Column(db.Numeric(10, 2))
    billing_information = db.Column(db.Text)
    connection_type = db.Column(db.String(255))
    capacity = db.Column(db.Numeric(10, 2))
    tier = db.Column(db.String(255))
    site_id = db.Column(db.Integer, db.ForeignKey('site.id'))
    location_id = db.Column(db.Integer, db.ForeignKey('geolocation.id'))

class Organization(db.Model):
    id = db.Column(db.Integer, primary_key=True, autoincrement=True)
    o_type = db.Column(db.String(255))
    rules = db.Column(db.Text)
    rewards = db.Column(db.Text)

class SiteOrganization(db.Model):
    site_id = db.Column(db.Integer, db.ForeignKey('site.id'), primary_key=True)
    organization_id = db.Column(db.Integer, db.ForeignKey('organization.id'), primary_key=True)

class HydrogenFuelCell(db.Model):
    __tablename__ = 'hydrogen_fuel_cell'
    id = db.Column(db.Integer, primary_key=True, autoincrement=True)
    name = db.Column(db.String(255))
    capacity = db.Column(db.Numeric(10, 2))
    lifespan = db.Column(db.Integer)
    dc_ac_out = db.Column(db.String(255))
    location = db.Column(db.String(255))
    description = db.Column(db.Text)
    size = db.Column(db.String(255))
    model_type = db.Column(db.String(255))
    efficiency = db.Column(db.Numeric(5, 2))
    operational_cost = db.Column(db.Numeric(10, 2))
    installation_cost = db.Column(db.Numeric(10, 2))
    maintenance_cost = db.Column(db.Numeric(10, 2))
    capacity_factor = db.Column(db.Numeric(5, 2))
    unit = db.Column(db.String(50))
    generation_type = db.Column(db.String(255))
    environmental_impact = db.Column(db.Text)
    renewable_sources = db.Column(db.String(255))
    hydrogen_consumption_rate = db.Column(db.Numeric(10, 2))
    operating_temperature = db.Column(db.Numeric(5, 2))
    operating_pressure = db.Column(db.Numeric(5, 2))
    power_output_curve = db.Column(db.JSON)
    cathode_oxidant_type = db.Column(db.Integer)
    modules_in_series_per_stack = db.Column(db.Integer)
    stacks_in_parallel = db.Column(db.Integer)
    electrode_area = db.Column(db.Numeric(10, 2))
    faraday_efficiency = db.Column(db.Numeric(5, 2))
    operating_voltage = db.Column(db.Numeric(5, 2))
    tafel_slope = db.Column(db.Numeric(5, 2))
    ohmic_resistance = db.Column(db.Numeric(5, 2))
    min_cell_voltage = db.Column(db.Numeric(5, 2))

class SiteHydrogenFuelCell(db.Model):
    site_id = db.Column(db.Integer, db.ForeignKey('site.id'), primary_key=True)
    hydrogen_fuel_cell_id = db.Column(db.Integer, db.ForeignKey('hydrogen_fuel_cell.id'), primary_key=True)

class HydrogenFuelCellPlant(db.Model):
    id = db.Column(db.Integer, primary_key=True, autoincrement=True)
    name = db.Column(db.String(255))
    location = db.Column(db.String(255))

class HydrogenFuelCellPlantHydrogenFuelCell(db.Model):
    hydrogen_fuel_cell_plant_id = db.Column(db.Integer, db.ForeignKey('hydrogen_fuel_cell_plant.id'), primary_key=True)
    hydrogen_fuel_cell_id = db.Column(db.Integer, db.ForeignKey('hydrogen_fuel_cell.id'), primary_key=True)

class Electrolyzer(db.Model):
    id = db.Column(db.Integer, primary_key=True, autoincrement=True)
    name = db.Column(db.String(255))
    location = db.Column(db.String(255))
    capacity = db.Column(db.Numeric(10, 2))
    efficiency = db.Column(db.Numeric(5, 2))
    hydrogen_production_rate = db.Column(db.Numeric(10, 2))
    operating_temperature = db.Column(db.Numeric(5, 2))
    operating_pressure = db.Column(db.Numeric(5, 2))
    power_to_hydrogen_curve = db.Column(db.JSON)
    temperature_mode = db.Column(db.String(255))
    electrode_area = db.Column(db.Numeric(10, 2))
    cells_in_series = db.Column(db.Integer)
    stacks_in_parallel = db.Column(db.Integer)
    max_current_density = db.Column(db.Numeric(10, 2))
    max_operating_temperature = db.Column(db.Numeric(5, 2))
    min_cell_voltage = db.Column(db.Numeric(5, 2))
    thermal_resistance = db.Column(db.Numeric(10, 2))
    thermal_time_constant = db.Column(db.Numeric(10, 2))
    electrolyzer_type = db.Column(db.Integer)
    logical_unit = db.Column(db.Integer)
    size = db.Column(db.String(255))
    model_type = db.Column(db.String(255))
    lifespan = db.Column(db.Integer)
    dc_ac_out = db.Column(db.String(255))
    operational_cost = db.Column(db.Numeric(10, 2))
    installation_cost = db.Column(db.Numeric(10, 2))
    maintenance_cost = db.Column(db.Numeric(10, 2))
    capacity_factor = db.Column(db.Numeric(5, 2))
    unit = db.Column(db.String(50))
    generation_type = db.Column(db.String(255))
    environmental_impact = db.Column(db.Text)
    renewable_sources = db.Column(db.String(255))
    description = db.Column(db.Text)

class SiteElectrolyzer(db.Model):
    site_id = db.Column(db.Integer, db.ForeignKey('site.id'), primary_key=True)
    electrolyzer_id = db.Column(db.Integer, db.ForeignKey('electrolyzer.id'), primary_key=True)

class HydrogenElectrolyzerPlant(db.Model):
    id = db.Column(db.Integer, primary_key=True, autoincrement=True)
    name = db.Column(db.String(255))
    location = db.Column(db.String(255))

class HydrogenElectrolyzerPlantElectrolyzer(db.Model):
    electrolyzer_plant_id = db.Column(db.Integer, db.ForeignKey('hydrogen_electrolyzer_plant.id'), primary_key=True)
    electrolyzer_id = db.Column(db.Integer, db.ForeignKey('electrolyzer.id'), primary_key=True)

class Biomass(db.Model):
    id = db.Column(db.Integer, primary_key=True, autoincrement=True)
    name = db.Column(db.String(255))
    size = db.Column(db.String(255))
    model_type = db.Column(db.String(255))
    capacity = db.Column(db.Numeric(10, 2))
    efficiency = db.Column(db.Numeric(5, 2))
    unit = db.Column(db.String(50))
    operational_cost = db.Column(db.Numeric(10, 2))
    installation_cost = db.Column(db.Numeric(10, 2))
    maintenance_cost = db.Column(db.Numeric(10, 2))
    lifespan = db.Column(db.Integer)
    capacity_factor = db.Column(db.Numeric(5, 2))
    dc_ac_out = db.Column(db.String(255))
    location = db.Column(db.String(255))
    description = db.Column(db.Text)
    generation_type = db.Column(db.String(255))
    environmental_impact = db.Column(db.Text)
    fuel_type = db.Column(db.String(255))
    feedstock_characteristics = db.Column(db.JSON)
    emission_rate = db.Column(db.Numeric(10, 2))
    renewable_sources = db.Column(db.String(255))

class SiteBiomass(db.Model):
    site_id = db.Column(db.Integer, db.ForeignKey('site.id'), primary_key=True)
    biomass_id = db.Column(db.Integer, db.ForeignKey('biomass.id'), primary_key=True)

class ConverterInverter(db.Model):
    id = db.Column(db.Integer, primary_key=True, autoincrement=True)
    name = db.Column(db.String(255))
    type = db.Column(db.String(255))
    capacity = db.Column(db.Numeric(10, 2))
    efficiency = db.Column(db.Numeric(5, 2))
    unit = db.Column(db.String(50))
    installation_cost = db.Column(db.Numeric(10, 2))
    maintenance_cost = db.Column(db.Numeric(10, 2))
    lifespan = db.Column(db.Integer)
    dc_ac_out = db.Column(db.String(255))
    location = db.Column(db.String(255))
    description = db.Column(db.Text)

class SiteConverterInverter(db.Model):
    site_id = db.Column(db.Integer, db.ForeignKey('site.id'), primary_key=True)
    converter_inverter_id = db.Column(db.Integer, db.ForeignKey('converter_inverter.id'), primary_key=True)

class GeoThermal(db.Model):
    id = db.Column(db.Integer, primary_key=True, autoincrement=True)
    name = db.Column(db.String(255))
    size = db.Column(db.String(255))
    model_type = db.Column(db.String(255))
    capacity = db.Column(db.Numeric(10, 2))
    efficiency = db.Column(db.Numeric(5, 2))
    unit = db.Column(db.String(50))
    operational_cost = db.Column(db.Numeric(10, 2))
    installation_cost = db.Column(db.Numeric(10, 2))
    maintenance_cost = db.Column(db.Numeric(10, 2))
    lifespan = db.Column(db.Integer)
    capacity_factor = db.Column(db.Numeric(5, 2))
    dc_ac_out = db.Column(db.String(255))
    location = db.Column(db.String(255))
    description = db.Column(db.Text)
    renewable_sources = db.Column(db.String(255))
    generation_type = db.Column(db.String(255))
    environmental_impact = db.Column(db.Text)
    geothermal_gradient = db.Column(db.Numeric(5, 2))
    depth = db.Column(db.Numeric(10, 2))
    flow_rate = db.Column(db.Numeric(10, 2))

class SiteGeoThermal(db.Model):
    site_id = db.Column(db.Integer, db.ForeignKey('site.id'), primary_key=True)
    geothermal_id = db.Column(db.Integer, db.ForeignKey('geo_thermal.id'), primary_key=True)

class Hydropower(db.Model):
    id = db.Column(db.Integer, primary_key=True, autoincrement=True)
    name = db.Column(db.String(255))
    size = db.Column(db.String(255))
    model_type = db.Column(db.String(255))
    capacity = db.Column(db.Numeric(10, 2))
    efficiency = db.Column(db.Numeric(5, 2))
    unit = db.Column(db.String(50))
    operational_cost = db.Column(db.Numeric(10, 2))
    installation_cost = db.Column(db.Numeric(10, 2))
    maintenance_cost = db.Column(db.Numeric(10, 2))
    lifespan = db.Column(db.Integer)
    capacity_factor = db.Column(db.Numeric(5, 2))
    dc_ac_out = db.Column(db.String(255))
    location = db.Column(db.String(255))
    description = db.Column(db.Text)
    renewable_sources = db.Column(db.String(255))
    generation_type = db.Column(db.String(255))
    environmental_impact = db.Column(db.Text)
    water_flow_rate = db.Column(db.Numeric(10, 2))
    head_height = db.Column(db.Numeric(10, 2))
    turbine_efficiency = db.Column(db.Numeric(5, 2))

class SiteHydropower(db.Model):
    site_id = db.Column(db.Integer, db.ForeignKey('site.id'), primary_key=True)
    hydropower_id = db.Column(db.Integer, db.ForeignKey('hydropower.id'), primary_key=True)

class PVArray(db.Model):
    __tablename__ = 'pv_array'
    id = db.Column(db.Integer, primary_key=True, autoincrement=True)
    name = db.Column(db.String(255))
    location = db.Column(db.String(255))
    rated_power = db.Column(db.Numeric(10, 2))
    efficiency = db.Column(db.Numeric(5, 2))
    area = db.Column(db.Numeric(10, 2))
    module = db.Column(db.String(255))
    module_type = db.Column(db.String(255))
    module_parameters = db.Column(db.JSON)
    temperature_model_parameters = db.Column(db.JSON)
    capacity = db.Column(db.Numeric(10, 2))
    lifespan = db.Column(db.Integer)
    dc_ac_out = db.Column(db.String(255))
    description = db.Column(db.Text)
    size = db.Column(db.String(255))
    model_type = db.Column(db.String(255))
    operational_cost = db.Column(db.Numeric(10, 2))
    installation_cost = db.Column(db.Numeric(10, 2))
    maintenance_cost = db.Column(db.Numeric(10, 2))
    capacity_factor = db.Column(db.Numeric(5, 2))
    unit = db.Column(db.String(50))
    generation_type = db.Column(db.String(255))
    environmental_impact = db.Column(db.Text)
    renewable_sources = db.Column(db.String(255))

class SitePVArray(db.Model):
    site_id = db.Column(db.Integer, db.ForeignKey('site.id'), primary_key=True)
    pv_array_id = db.Column(db.Integer, db.ForeignKey('pv_array.id'), primary_key=True)

class PVFarm(db.Model):
    id = db.Column(db.Integer, primary_key=True, autoincrement=True)
    name = db.Column(db.String(255))
    location = db.Column(db.String(255))
    surface_tilt = db.Column(db.Numeric(5, 2))
    surface_azimuth = db.Column(db.Numeric(5, 2))
    albedo = db.Column(db.Numeric(5, 2))
    surface_type = db.Column(db.String(255))

class PVFarmPVArray(db.Model):
    pv_farm_id = db.Column(db.Integer, db.ForeignKey('pv_farm.id'), primary_key=True)
    pv_array_id = db.Column(db.Integer, db.ForeignKey('pv_array.id'), primary_key=True)

class WindTurbine(db.Model):
    id = db.Column(db.Integer, primary_key=True, autoincrement=True)
    name = db.Column(db.String(255))
    location = db.Column(db.String(255))
    capacity = db.Column(db.Numeric(10, 2))
    hub_height = db.Column(db.Numeric(10, 2))
    rotor_diameter = db.Column(db.Numeric(10, 2))
    turbine_model = db.Column(db.String(255))
    efficiency = db.Column(db.Numeric(5, 2))
    power_curve = db.Column(db.JSON)
    power_coefficient_curve = db.Column(db.JSON)
    len_unit = db.Column(db.String(50))
    spd_unit = db.Column(db.String(50))
    pwr_unit = db.Column(db.String(50))
    ctl_mode = db.Column(db.String(50))
    rotor_ht = db.Column(db.Numeric(10, 2))
    sensr_ht = db.Column(db.Numeric(10, 2))
    sher_exp = db.Column(db.Numeric(5, 2))
    turb_int = db.Column(db.Numeric(5, 2))
    air_dens = db.Column(db.Numeric(5, 2))
    pwr_ratd = db.Column(db.Numeric(10, 2))
    spd_ratd = db.Column(db.Numeric(10, 2))
    num_pair = db.Column(db.Integer)
    lifespan = db.Column(db.Integer)
    dc_ac_out = db.Column(db.String(255))
    description = db.Column(db.Text)
    size = db.Column(db.String(255))
    model_type = db.Column(db.String(255))
    operational_cost = db.Column(db.Numeric(10, 2))
    installation_cost = db.Column(db.Numeric(10, 2))
    maintenance_cost = db.Column(db.Numeric(10, 2))
    capacity_factor = db.Column(db.Numeric(5, 2))
    unit = db.Column(db.String(50))
    generation_type = db.Column(db.String(255))
    environmental_impact = db.Column(db.Text)
    renewable_sources = db.Column(db.String(255))

class SiteWindTurbine(db.Model):
    site_id = db.Column(db.Integer, db.ForeignKey('site.id'), primary_key=True)
    wind_turbine_id = db.Column(db.Integer, db.ForeignKey('wind_turbine.id'), primary_key=True)

class WindFarm(db.Model):
    id = db.Column(db.Integer, primary_key=True, autoincrement=True)
    name = db.Column(db.String(255))
    location = db.Column(db.String(255))
    farm_efficiency = db.Column(db.JSON)

class WindFarmWindTurbine(db.Model):
    wind_farm_id = db.Column(db.Integer, db.ForeignKey('wind_farm.id'), primary_key=True)
    wind_turbine_id = db.Column(db.Integer, db.ForeignKey('wind_turbine.id'), primary_key=True)

class ElectricBattery(db.Model):
    id = db.Column(db.Integer, primary_key=True, autoincrement=True)
    name = db.Column(db.String(255))
    capacity = db.Column(db.Numeric(10, 2))
    dc_ac_out = db.Column(db.String(255))
    storage_efficiency = db.Column(db.Numeric(5, 2))
    charge_efficiency = db.Column(db.Numeric(5, 2))
    discharge_efficiency = db.Column(db.Numeric(5, 2))
    state_of_charge = db.Column(db.Numeric(5, 2))
    type = db.Column(db.String(255))
    max_current_charge = db.Column(db.Numeric(10, 2))
    max_current_discharge = db.Column(db.Numeric(10, 2))
    max_charge_voltage = db.Column(db.Numeric(10, 2))
    cells_in_parallel = db.Column(db.Integer)
    cells_in_series = db.Column(db.Integer)
    location = db.Column(db.String(255))
    lifespan = db.Column(db.Integer)
    description = db.Column(db.Text)

class SiteElectricBattery(db.Model):
    site_id = db.Column(db.Integer, db.ForeignKey('site.id'), primary_key=True)
    electric_battery_id = db.Column(db.Integer, db.ForeignKey('electric_battery.id'), primary_key=True)

class FlywheelEnergyStorage(db.Model):
    id = db.Column(db.Integer, primary_key=True, autoincrement=True)
    name = db.Column(db.String(255))
    capacity = db.Column(db.Numeric(10, 2))
    dc_ac_out = db.Column(db.String(255))
    storage_efficiency = db.Column(db.Numeric(5, 2))
    charge_efficiency = db.Column(db.Numeric(5, 2))
    discharge_efficiency = db.Column(db.Numeric(5, 2))
    state_of_charge = db.Column(db.Numeric(5, 2))
    rotational_speed = db.Column(db.Numeric(10, 2))
    moment_of_inertia = db.Column(db.Numeric(10, 2))
    mechanical_losses = db.Column(db.Numeric(10, 2))
    location = db.Column(db.String(255))
    lifespan = db.Column(db.Integer)
    description = db.Column(db.Text)

class SiteFlywheelEnergyStorage(db.Model):
    site_id = db.Column(db.Integer, db.ForeignKey('site.id'), primary_key=True)
    flywheel_energy_storage_id = db.Column(db.Integer, db.ForeignKey('flywheel_energy_storage.id'), primary_key=True)

class HydrogenEnergyStorage(db.Model):
    id = db.Column(db.Integer, primary_key=True, autoincrement=True)
    name = db.Column(db.String(255))
    capacity = db.Column(db.Numeric(10, 2))
    dc_ac_out = db.Column(db.String(255))
    storage_efficiency = db.Column(db.Numeric(5, 2))
    charge_efficiency = db.Column(db.Numeric(5, 2))
    discharge_efficiency = db.Column(db.Numeric(5, 2))
    state_of_charge = db.Column(db.Numeric(5, 2))
    lifetime_cycles = db.Column(db.Integer)
    max_charge_rate = db.Column(db.Numeric(10, 2))
    max_discharge_rate = db.Column(db.Numeric(10, 2))
    storage_pressure = db.Column(db.Numeric(10, 2))
    location = db.Column(db.String(255))
    lifespan = db.Column(db.Integer)
    description = db.Column(db.Text)

class SiteHydrogenEnergyStorage(db.Model):
    site_id = db.Column(db.Integer, db.ForeignKey('site.id'), primary_key=True)
    hydrogen_energy_storage_id = db.Column(db.Integer, db.ForeignKey('hydrogen_energy_storage.id'), primary_key=True)

class ThermalBattery(db.Model):
    id = db.Column(db.Integer, primary_key=True, autoincrement=True)
    name = db.Column(db.String(255))
    capacity = db.Column(db.Numeric(10, 2))
    dc_ac_out = db.Column(db.String(255))
    storage_efficiency = db.Column(db.Numeric(5, 2))
    charge_efficiency = db.Column(db.Numeric(5, 2))
    discharge_efficiency = db.Column(db.Numeric(5, 2))
    state_of_charge = db.Column(db.Numeric(5, 2))
    thermal_conductivity = db.Column(db.Numeric(10, 2))
    temperature_range = db.Column(db.JSON)
    heat_loss_coefficient = db.Column(db.Numeric(10, 2))
    lifespan = db.Column(db.Integer)
    location = db.Column(db.String(255))
    description = db.Column(db.Text)

class SiteThermalBattery(db.Model):
    site_id = db.Column(db.Integer, db.ForeignKey('site.id'), primary_key=True)
    thermal_battery_id = db.Column(db.Integer, db.ForeignKey('thermal_battery.id'), primary_key=True)

class CombinedHeatPower(db.Model):
    id = db.Column(db.Integer, primary_key=True, autoincrement=True)
    name = db.Column(db.String(255))
    capacity = db.Column(db.Numeric(10, 2))
    lifespan = db.Column(db.Integer)
    dc_ac_out = db.Column(db.String(255))
    location = db.Column(db.String(255))
    description = db.Column(db.Text)
    size = db.Column(db.String(255))
    model_type = db.Column(db.String(255))
    efficiency = db.Column(db.Numeric(5, 2))
    operational_cost = db.Column(db.Numeric(10, 2))
    installation_cost = db.Column(db.Numeric(10, 2))
    maintenance_cost = db.Column(db.Numeric(10, 2))
    capacity_factor = db.Column(db.Numeric(5, 2))
    unit = db.Column(db.String(50))
    fuel_type = db.Column(db.String(255))
    generation_type = db.Column(db.String(255))
    emissions_rate = db.Column(db.Numeric(10, 2))
    thermal_efficiency = db.Column(db.Numeric(5, 2))
    electrical_efficiency = db.Column(db.Numeric(5, 2))
    heat_output = db.Column(db.Numeric(10, 2))
    power_output = db.Column(db.Numeric(10, 2))

class SiteCombinedHeatPower(db.Model):
    site_id = db.Column(db.Integer, db.ForeignKey('site.id'), primary_key=True)
    combined_heat_power_id = db.Column(db.Integer, db.ForeignKey('combined_heat_power.id'), primary_key=True)

class Generator(db.Model):
    id = db.Column(db.Integer, primary_key=True, autoincrement=True)
    name = db.Column(db.String(255))
    capacity = db.Column(db.Numeric(10, 2))
    lifespan = db.Column(db.Integer)
    dc_ac_out = db.Column(db.String(255))
    location = db.Column(db.String(255))
    description = db.Column(db.Text)
    size = db.Column(db.String(255))
    model_type = db.Column(db.String(255))
    efficiency = db.Column(db.Numeric(5, 2))
    operational_cost = db.Column(db.Numeric(10, 2))
    installation_cost = db.Column(db.Numeric(10, 2))
    maintenance_cost = db.Column(db.Numeric(10, 2))
    capacity_factor = db.Column(db.Numeric(5, 2))
    unit = db.Column(db.String(50))
    fuel_type = db.Column(db.String(255))
    generation_type = db.Column(db.String(255))
    emissions_rate = db.Column(db.Numeric(10, 2))
    generator_efficiency = db.Column(db.Numeric(5, 2))
    power_output = db.Column(db.Numeric(10, 2))
    operating_hours = db.Column(db.Numeric(10, 2))

class SiteGenerator(db.Model):
    site_id = db.Column(db.Integer, db.ForeignKey('site.id'), primary_key=True)
    generator_id = db.Column(db.Integer, db.ForeignKey('generator.id'), primary_key=True)

class SteamMethaneReformer(db.Model):
    id = db.Column(db.Integer, primary_key=True, autoincrement=True)
    name = db.Column(db.String(255))
    capacity = db.Column(db.Numeric(10, 2))
    lifespan = db.Column(db.Integer)
    dc_ac_out = db.Column(db.String(255))
    location = db.Column(db.String(255))
    description = db.Column(db.Text)
    size = db.Column(db.String(255))
    model_type = db.Column(db.String(255))
    efficiency = db.Column(db.Numeric(5, 2))
    operational_cost = db.Column(db.Numeric(10, 2))
    installation_cost = db.Column(db.Numeric(10, 2))
    maintenance_cost = db.Column(db.Numeric(10, 2))
    capacity_factor = db.Column(db.Numeric(5, 2))
    unit = db.Column(db.String(50))
    fuel_type = db.Column(db.String(255), default='Natural Gas')
    generation_type = db.Column(db.String(255))
    emissions_rate = db.Column(db.Numeric(10, 2))
    reformer_efficiency = db.Column(db.Numeric(5, 2))
    hydrogen_production_rate = db.Column(db.Numeric(10, 2))
    operating_hours = db.Column(db.Numeric(10, 2))

class SiteSteamMethaneReformer(db.Model):
    site_id = db.Column(db.Integer, db.ForeignKey('site.id'), primary_key=True)
    steam_methane_reformer_id = db.Column(db.Integer, db.ForeignKey('steam_methane_reformer.id'), primary_key=True)

class HydrogenBasedCPHS(db.Model):
    id = db.Column(db.Integer, primary_key=True, autoincrement=True)
    name = db.Column(db.String(255))
    capacity = db.Column(db.Numeric(10, 2))
    lifespan = db.Column(db.Integer)
    dc_ac_out = db.Column(db.String(255))
    location = db.Column(db.String(255))
    description = db.Column(db.Text)
    size = db.Column(db.String(255))
    model_type = db.Column(db.String(255))
    efficiency = db.Column(db.Numeric(5, 2))
    operational_cost = db.Column(db.Numeric(10, 2))
    installation_cost = db.Column(db.Numeric(10, 2))
    maintenance_cost = db.Column(db.Numeric(10, 2))
    capacity_factor = db.Column(db.Numeric(5, 2))
    unit = db.Column(db.String(50))
    generation_type = db.Column(db.String(255))
    environmental_impact = db.Column(db.Text)
    renewable_sources = db.Column(db.String(255))
    hydrogen_consumption_rate = db.Column(db.Numeric(10, 2))
    water_consumption_rate = db.Column(db.Numeric(10, 2))

class SiteHydrogenBasedCPHS(db.Model):
    site_id = db.Column(db.Integer, db.ForeignKey('site.id'), primary_key=True)
    hydrogen_based_cphs_id = db.Column(db.Integer, db.ForeignKey('hydrogen_based_cphs.id'), primary_key=True)

class WaterTreatmentPlant(db.Model):
    id = db.Column(db.Integer, primary_key=True, autoincrement=True)
    name = db.Column(db.String(255))
    capacity = db.Column(db.Numeric(10, 2))
    lifespan = db.Column(db.Integer)
    dc_ac_out = db.Column(db.String(255))
    location = db.Column(db.String(255))
    description = db.Column(db.Text)
    size = db.Column(db.String(255))
    model_type = db.Column(db.String(255))
    efficiency = db.Column(db.Numeric(5, 2))
    operational_cost = db.Column(db.Numeric(10, 2))
    installation_cost = db.Column(db.Numeric(10, 2))
    maintenance_cost = db.Column(db.Numeric(10, 2))
    capacity_factor = db.Column(db.Numeric(5, 2))
    unit = db.Column(db.String(50))
    generation_type = db.Column(db.String(255))
    environmental_impact = db.Column(db.Text)
    renewable_sources = db.Column(db.String(255))
    power_consumption_per_m3 = db.Column(db.Numeric(10, 2))

class SiteWaterTreatmentPlant(db.Model):
    site_id = db.Column(db.Integer, db.ForeignKey('site.id'), primary_key=True)
    water_treatment_plant_id = db.Column(db.Integer, db.ForeignKey('water_treatment_plant.id'), primary_key=True)

class PowerPlant(db.Model):
    id = db.Column(db.Integer, primary_key=True, autoincrement=True)
    name = db.Column(db.String(255))
    fuel_type = db.Column(db.String(255))
    capacity = db.Column(db.Numeric(10, 2))
    lifespan = db.Column(db.Integer)
    dc_ac_out = db.Column(db.String(255))
    location = db.Column(db.String(255))
    description = db.Column(db.Text)
    size = db.Column(db.String(255))
    model_type = db.Column(db.String(255))
    efficiency = db.Column(db.Numeric(5, 2))
    operational_cost = db.Column(db.Numeric(10, 2))
    installation_cost = db.Column(db.Numeric(10, 2))
    maintenance_cost = db.Column(db.Numeric(10, 2))
    capacity_factor = db.Column(db.Numeric(5, 2))
    unit = db.Column(db.String(50))
    emissions_rate = db.Column(db.Numeric(10, 2))
    generation_type = db.Column(db.String(255))
    fuel_consumption_rate = db.Column(db.Numeric(10, 2))

class SitePowerPlant(db.Model):
    site_id = db.Column(db.Integer, db.ForeignKey('site.id'), primary_key=True)
    power_plant_id = db.Column(db.Integer, db.ForeignKey('power_plant.id'), primary_key=True)
